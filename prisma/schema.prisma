generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  username        String?  @unique
  profilePicture  String?  // Optional URL to profile picture
  country         String?  // Optional country name or code
  createdAt       DateTime @default(now())
  gems            Int      @default(100)
  nextPackAt      DateTime @default(now())
  role            Role     @default(USER)
  walletAddress   String   @unique

  // Friend Request Relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Friends Relations
  friends  Friend[] @relation("UserFriends")
  friendOf Friend[] @relation("FriendOfUser")

  // Trade Request Relations
  sentTradeRequests     TradeRequest[] @relation("SentRequests")
  receivedTradeRequests TradeRequest[] @relation("ReceivedRequests")

  // Relations
  gemPurchases    GemPurchase[]

  @@map("user")
}

model GemPackage {
  id                  String   @id @default(uuid())
  amount              Int      // Number of gems in the package
  priceCents          Int      // Price in cents (e.g., 700 for $7.00)
  currency            String   @default("USD")
  stripeId            String   @unique // Stripe Price ID
  badge               String?  // "Starter", "Popular", "Best Value", etc.
  popular             Boolean  @default(false)
  active              Boolean  @default(true)
  discountPercentage  Int      @default(0) // 0-100 percentage
  
  // Metadata
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  // Relations
  purchases           GemPurchase[]
  
  @@map("gem_packages")
}

model GemPurchase {
  id            String      @id @default(uuid())
  userId        String
  packageId     String
  amount        Int         // Gems purchased
  priceCents    Int         // Amount paid in cents
  currency      String      @default("USD")
  stripeId      String?     // Stripe Payment Intent ID
  status        PurchaseStatus @default(PENDING)
  
  // Timestamps
  createdAt     DateTime    @default(now())
  completedAt   DateTime?
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  package       GemPackage  @relation(fields: [packageId], references: [id])
  
  @@map("gem_purchases")
}

enum PurchaseStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  sender     User                @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String              @map("sender_id")
  receiver   User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String              @map("receiver_id")
  status     FriendRequestStatus @default(pending)
  createdAt  DateTime            @default(now()) @map("created_at")

  @@map("friend_requests") // map to your actual table name
}

model Friend {
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  friend    User     @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, friendId])
  @@map("friends")
}

model TradeRequest {
  id              String      @id @default(cuid())
  senderId        String
  receiverId      String
  offeredCardId   Int
  requestedCardId Int?
  senderStatus    TradeStatus @default(pending)
  receiverStatus  TradeStatus @default(pending)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@map("trade_request")
}




enum FriendRequestStatus {
  pending
  accepted
  rejected
}

enum TradeStatus {
  pending
  accepted
  rejected
}
