generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:cz5f5l12@localhost:3306/pokemon"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  username  String   @unique

  userCards UserCard[] // ✅ reverse relation

  // Friend Request Relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Friends Relations
  friends   Friend[] @relation("UserFriends")
  friendOf  Friend[] @relation("FriendOfUser")

  @@map("user")
}

model Pokemon {
  id          Int      @id @default(autoincrement())
  name        String
  type        String
  rarity      String
  imageUri    String
  description String
  createdAt   DateTime @default(now())

  userCards UserCard[] // ✅ reverse relation
}

model UserCard {
  id           Int      @id @default(autoincrement())
  userId       String   @map("user_id")
  pokemonId    Int      @map("pokemon_id")
  quantity     Int      @default(1)
  minted       Boolean  @default(false)
  tokenId      String?  @map("token_id")
  nftContract  String?  @map("nft_contract")
  metadataUri  String?  @map("metadata_uri")
  createdAt    DateTime @default(now()) @map("created_at")

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pokemon      Pokemon  @relation(fields: [pokemonId], references: [id], onDelete: Cascade)

  @@map("user_cards")
}

model FriendRequest {
  id         Int                  @id @default(autoincrement())
  sender     User                 @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String               @map("sender_id")
  receiver   User                 @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String               @map("receiver_id")
  status     FriendRequestStatus @default(pending)
  createdAt  DateTime            @default(now()) @map("created_at")

  @@unique([senderId, receiverId])
  @@map("friend_requests") // map to your actual table name
}

model Friend {
  user     User    @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @map("user_id")
  friend   User    @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId String  @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, friendId])
  @@map("friends")
}

enum FriendRequestStatus {
  pending
  accepted
  rejected
}
