generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:cz5f5l12@localhost:3306/pokemon"
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique
  password      String
  createdAt     DateTime @default(now())
  username      String   @unique
  walletAddress String   @unique

  // Friend Request Relations
  sentFriendRequests     FriendRequest[] @relation("SentFriendRequests")
  receivedFriendRequests FriendRequest[] @relation("ReceivedFriendRequests")

  // Friends Relations
  friends  Friend[] @relation("UserFriends")
  friendOf Friend[] @relation("FriendOfUser")

  // Trade Request Relations
  sentTradeRequests     TradeRequest[] @relation("SentRequests")
  receivedTradeRequests TradeRequest[] @relation("ReceivedRequests")

  @@map("user")
}

model FriendRequest {
  id         Int                 @id @default(autoincrement())
  sender     User                @relation("SentFriendRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String              @map("sender_id")
  receiver   User                @relation("ReceivedFriendRequests", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String              @map("receiver_id")
  status     FriendRequestStatus @default(pending)
  createdAt  DateTime            @default(now()) @map("created_at")

  @@map("friend_requests") // map to your actual table name
}

model Friend {
  user      User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  friend    User     @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, friendId])
  @@map("friends")
}

model TradeRequest {
  id              String      @id @default(cuid())
  senderId        String
  receiverId      String
  offeredCardId   Int
  requestedCardId Int?
  senderStatus    TradeStatus @default(pending)
  receiverStatus  TradeStatus @default(pending)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  sender   User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@map("trade_request")
}




enum FriendRequestStatus {
  pending
  accepted
  rejected
}

enum TradeStatus {
  pending
  accepted
  rejected
}
